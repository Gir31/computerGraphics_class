구현한 내용 :
	1. 도형 슬라이스 쉬운 버전으로 구현
		- 슬라이스 범위를 사각형으로 설정
		- MOUSE_LEFT_DOWN시 좌표를 p1, MOUSE_LEFT_UP시 좌표를 p2로 설정
		- Cohen-Sutherland 알고리즘에서 윈도우의 경계와 선의 교차점을 찾는 과정을 사용
		- 교차점이 도형의 히트박스 LEFT 경계와 RIGHT 경계에서는 도형의 히트박스 minY와 maxY 사이에 있는지 판별
		- 교차점이 도형의 히트박스 TOP 경계와 BOTTOM 경계에서는 도형의 히트박스 minX와 maxX 사이에 있는지 판별
		- 만약 하나의 교차점이라도 사이에 존재한다면 슬라이스 가능한 것으로 판별하여 슬라이스
		- 슬라이스는 쉬운 버전으로 무조건 삼각형 두개로 나눠지도록 설정
		- 이때 슬라이스된 도형은 링크드 리스트를 통하여 저장

	2. 도형 움직임 구현 및 경로 출력
		- 도형 생성시 컨트롤 포인트 3개를 지정하여 매개변수 t를 이용하여 움직이도록 구현
		- 경로 또한 매개변수 t를 이용하여 출력

	3. 바구니 구현 및 움직임 구현
		- 좌우로 계속해서 움직이도록 구현
	
	4. 슬라이스 된 도형이 바구니에 닿을 시 움직임 구현
		- 슬라이스 된 도형이 바구니에 닿는 동안 떨어지는 움직임이 구현되지 않는다
		- 바구니가 움직여서 도형의 바닥범위에서 벗어난다면 다시 떨어지도록 구현

	5. 슬라이스 된 도형이 일정 높이 이하로 떨어질 경우 삭제
		- 슬라이스 된 도형의 TOP을 측정하여 -1.0f보다 작다면 링크드 리스트에서 삭제

	6. 버튼 클릭식 도형의 FILL or LINE 구현

=====================================================================================

구현 못한 내용 :
	1. 도형 슬라이스 어려운 버전 구현
	2. 한번 슬라이스한 도형 다시 슬라이스
	3. 프로그램 시작시 날라오는 경로 직접 설정
	4. 도형이 회전하며 날라오기

=====================================================================================

명령어
	l, L : 도형의 LINE
	f, F : 도형의 FILL
	p : 도형 경로 출력 시작
	P : 도형 경로 출력 중지
	+ : 도형 속도 증가 (최대 속도 : 0.01f)
	- : 도형 속도 감소 (최저 속도 : 0.001f)
	q, Q : 프로그램 종료

=====================================================================================

실행시 알아야 될 점 :
	- 화면에 도형이 최대 한 개씩만 나오도록 설정했습니다.